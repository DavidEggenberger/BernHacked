@inject HttpClientService httpClientService

<div class="chatComponentContainer">
    <div class="chatOverview" @onkeydown="async(c) => await HandleKeyDown(c)">
        @if(chatDTO != null)
        {
            foreach(var message in chatDTO.Messages)
            {
                <MessageComponent CallBack="() => this.GetMessagesForChat()" Message="message" chat="chatDTO"/>
            }
            @if(!Configurations.Any(c => c == ChatConfigurationDTO.OnlyHuman))
            {
                <MessageComponent CallBack="() => this.GetMessagesForChat()" Message="botMessage" chat="chatDTO" />
            }
        }
        @if (IsWaiting)
        {
            <div class="LoadingSpinner">
                <div class="lds-ripple"><div></div><div></div></div>
            </div>
        }
        @if (chatDTO.Messages.Last().MessageType != MessageTypeDTO.Question)
        {
            <div class="chatInputContainer">
                <input @bind="currentMessageText" @bind:event="oninput" />
                <img src="/enter.png" />
                <label>Zum Senden Enter drücken</label>
                @if (Configurations.Contains(ChatConfigurationDTO.Speech))
                {
                    <img class="Microphone" src="/microphone.png"/>
                }
            </div>
        }
    </div>
</div>

@code{
    private bool IsWaiting = false;
    private MessageDTO botMessage = new MessageDTO
    {
        MessageType = MessageTypeDTO.SpecialInformation,
        Text = "Der Chatbot führt sie in das Gespräch ein er sie an eine Fachperson weiterleited "
    };

    [Parameter]
    public List<ChatConfigurationDTO> Configurations { get; set; }

    [CascadingParameter]
    public HubConnection HubConnection { get; set; }

    private ChatDTO chatDTO;
    private string currentMessageText;

    protected override async Task OnInitializedAsync()
    {
        chatDTO = new ChatDTO();

        HubConnection.On("Update", async () =>
        {
            await GetMessagesForChat();
            IsWaiting = false;
            StateHasChanged();
        });
    }

    private async Task HandleKeyDown(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            await CreateMessageOrChat(currentMessageText);

            currentMessageText = string.Empty;
        }
    }

    private async Task CreateMessageOrChat(string message)
    {
        if (string.IsNullOrWhiteSpace(message))
        {
            return;
        }

        var messageDTO = new MessageDTO
        {
            Text = message,
            MessageSenderType = MessageSenderTypeDTO.Patient
        };

        chatDTO.Messages.Add(messageDTO);

        IsWaiting = true;
        if (chatDTO.Messages.Count <= 2)
        {
            chatDTO = await httpClientService.PostToAPIAsync("/chats", chatDTO);
        }
        else
        {
            await httpClientService.PostToAPIAsync($"/chats/{chatDTO.Id}/messages", messageDTO);
        }

        currentMessageText = string.Empty;
        
        await GetMessagesForChat();
        StateHasChanged();
    }

    private async Task GetMessagesForChat()
    {
        var messages = await httpClientService.GetFromAPIAsync<IEnumerable<MessageDTO>>($"/chats/{chatDTO.Id}/messages");
        chatDTO.Messages = messages.ToList();
    }
}