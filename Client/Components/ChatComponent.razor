@inject HttpClientService httpClientService

<div class="chatComponentContainer">
    <div class="chatOverview" @onkeydown="async(c) => await HandleKeyDown(c)">
        @if(chatDTO != null)
        {
            foreach(var message in chatDTO.Messages)
            {
                <MessageComponent Message="message"/>            
            }
        }
        <div class="chatInputContainer">
            <input @bind="currentMessageText" @bind:event="oninput" />
            <img src="/enter.png"/>
            <label>Zum Senden Enter drücken</label>
        </div>
    </div>
</div>

@code{
    private ChatDTO chatDTO;
    private string currentMessageText;

    protected override async Task OnInitializedAsync()
    {
        chatDTO = new ChatDTO();
    }

    private async Task HandleKeyDown(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            await CreateMessageOrChat(currentMessageText);
        }
    }

    private async Task CreateMessageOrChat(string message)
    {
        if (string.IsNullOrWhiteSpace(message))
        {
            return;
        }

        var messageDTO = new MessageDTO
        {
            Text = message,
            MessageSenderType = MessageSenderTypeDTO.Patient
        };

        chatDTO.Messages.Add(messageDTO);

        if (chatDTO.Messages.Count <= 2)
        {
            chatDTO = await httpClientService.PostToAPIAsync("/chats", chatDTO);
            Console.WriteLine(chatDTO.Id);
        }
        else
        {
            await httpClientService.PostToAPIAsync($"/chats/{chatDTO.Id}/messages", messageDTO);
        }

        currentMessageText = string.Empty;
        
        GetMessagesForChat();
        StateHasChanged();
    }

    private async Task GetMessagesForChat()
    {
        var messages = await httpClientService.GetFromAPIAsync<IEnumerable<MessageDTO>>($"/chats/{chatDTO.Id}/messages");
        chatDTO.Messages = messages.ToList();
    }
}