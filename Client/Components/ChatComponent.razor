@inject HttpClientService httpClientService
@inject IJSRuntime JSRuntime
@using System.Text
@using Shared

<div class="chatComponentContainer">
    <div class="chatOverview" @onkeydown="async(c) => await HandleKeyDown(c)">
        @if(chatDTO != null)
        {
            foreach(var message in chatDTO.Messages)
            {
                <MessageComponent CallBack="() => this.GetMessagesForChat()" Message="message" chat="chatDTO"/>
                @if(message.MessageType == MessageTypeDTO.SpecialInformation && chatDTO.Messages.Count <= 2)
                {
                    if (Configurations.All(c => c != ChatConfigurationDTO.OnlyHuman))
                    {
                        <MessageComponent CallBack="() => this.GetMessagesForChat()" Message="botMessage" chat="chatDTO" />
                    }
                    else if (Configurations.Any(c => c == ChatConfigurationDTO.OnlyHuman))
                    {
                        <MessageComponent CallBack="() => this.GetMessagesForChat()" Message="personMessage" chat="chatDTO" />
                    }
                }
            }
        }
        @if (IsWaiting)
        {
            <div class="LoadingSpinner">
                <div class="lds-ripple"><div></div><div></div></div>
            </div>
        }
        @if (chatDTO.Messages.Last().MessageType != MessageTypeDTO.Question)
        {
            <div class="chatInputContainer">
                <input @bind="currentMessageText" @bind:event="oninput" />
                <img src="/enter.png" />
                <label>Zum Senden Enter drücken</label>
                @if (Configurations.Contains(ChatConfigurationDTO.Speech))
                {
                    @if(recording is false)
                    {
                        <img @onclick="async () => await StartMicrophoneRecordingAsync()" class="Microphone" src="/microphone.png"/>
                    }
                    else
                    {
                        <img class="Microphone" id="btnStop" @onclick="async () => await StopMicrophoneRecordingAsync()" src="/microphoneRecording.png" />
                    }
                }
            </div>
        }
    </div>
</div>

@code{
    private bool recording;
    private bool IsWaiting = false;
    private MessageDTO botMessage = new MessageDTO
    {
        MessageType = MessageTypeDTO.SpecialInformation,
        Text = "Der Chatbot started das Gespräch, bis es eine Fachperson übernimmt"
    };

    private MessageDTO personMessage = new MessageDTO
        {
            MessageType = MessageTypeDTO.SpecialInformation,
            Text = "Bitte warten sie, bis eine Fachperson übernimmt"
        };

    AzureCognitiveServicesTokenDTO token;

    [Parameter]
    public List<ChatConfigurationDTO> Configurations { get; set; }

    public async Task UpdateConfigurations(List<ChatConfigurationDTO> Configurations)
    {
        if (chatDTO.Id == 0)
        {
            chatDTO.Configurations = Configurations;

            return;
        }

        var container = new ChatConfigurationContainer
        {
            Configurations = Configurations
        };

        await httpClientService.PostToAPIAsync($"/chats/{chatDTO.Id}/configuration", container);
    }

    [CascadingParameter]
    public HubConnection HubConnection { get; set; }

    private ChatDTO chatDTO;
    private string currentMessageText;
    private string currentVoiceText;

    protected override async Task OnInitializedAsync()
    {
        chatDTO = new ChatDTO();

        token = await httpClientService.GetFromAPIAsync<AzureCognitiveServicesTokenDTO>("/AzureSpeech");

        HubConnection.On("Update", async () =>
        {
            if (chatDTO?.Id != 0)
            {
                await GetMessagesForChat();
            }
            IsWaiting = false;
            StateHasChanged();
        });
    }

    private async Task HandleKeyDown(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            await CreateMessageOrChat(currentMessageText);
        }
    }

    private async Task CreateMessageOrChat(string message)
    {
        if (string.IsNullOrWhiteSpace(message))
        {
            return;
        }

        var messageDTO = new MessageDTO
        {
            Text = message,
            MessageSenderType = MessageSenderTypeDTO.Patient
        };

        currentMessageText = string.Empty;

        chatDTO.Messages.Add(messageDTO);

        IsWaiting = true;
        if (chatDTO.Messages.Count <= 2)
        {
            chatDTO = await httpClientService.PostToAPIAsync("/chats", chatDTO);
        }
        else
        {
            await httpClientService.PostToAPIAsync($"/chats/{chatDTO.Id}/messages", messageDTO);
        }


        await GetMessagesForChat();
        StateHasChanged();
    }

    private async Task GetMessagesForChat()
    {
        var messages = await httpClientService.GetFromAPIAsync<IEnumerable<MessageDTO>>($"/chats/{chatDTO.Id}/messages");
        chatDTO.Messages = messages.ToList();
    }

    List<byte> bytes;
    string recordedMediaAsBase64;

    public async Task StartMicrophoneRecordingAsync()
    {
        recording = true;
        bytes = new List<byte>();
        await JSRuntime.InvokeVoidAsync("analyzeMicrophone", DotNetObjectReference.Create(this), "de-CH", token.Token);
        await JSRuntime.InvokeVoidAsync("recordMicrophone", DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public void ScreenRecordedCallback(string s)
    {
        foreach (var item in Convert.FromBase64String(s))
        {
            bytes.Add(item);
        }

    }

    [JSInvokable]
    public void Finished()
    {
        recordedMediaAsBase64 = Convert.ToBase64String(bytes.ToArray());
        StateHasChanged();
    }

    public async Task StopMicrophoneRecordingAsync()
    {
        recording = false;

        await Task.Delay(900);

        var messageDTO = new MessageDTO
        {
            MessageType = MessageTypeDTO.Voice,
            MessageSenderType = MessageSenderTypeDTO.Patient,
            Base64Data = recordedMediaAsBase64,
            Text = currentVoiceText
        };

        chatDTO.Messages.Add(messageDTO);

        IsWaiting = true;
        if (chatDTO.Messages.Count <= 2)
        {
            chatDTO = await httpClientService.PostToAPIAsync("/chats", chatDTO);
        }
        else
        {
            await httpClientService.PostToAPIAsync($"/chats/{chatDTO.Id}/messages", messageDTO);
        }


        await GetMessagesForChat();
        StateHasChanged();
    }

    [JSInvokable]
    public void MicrophoneAnalyzedCallback(string s, string li)
    {
        var v = s.Substring("[object Object]".Count());
        currentVoiceText = v;

        StateHasChanged();
    }
}